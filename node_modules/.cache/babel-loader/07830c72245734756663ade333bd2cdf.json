{"ast":null,"code":"var _jsxFileName = \"C:\\\\nlW\\\\new_aulas\\\\letmeask\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext } from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport { Home } from \"./pages/Home\";\nimport { NewRoom } from \"./pages/NewRoom\";\nimport { useState } from 'react';\nimport { auth, firebase } from './services/firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext({});\n\nfunction App() {\n  _s();\n\n  const [user, setUser] = useState(); // criando um estado (informação ) para mandar para contexto\n\n  function signInWithGoogle() {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider).then(result => {\n      // ele abre  o login do google como poup da tela\n      if (result.user) {\n        // se o usuario autenticado 100%  então\n        const {\n          displayName,\n          photoURL,\n          uid\n        } = result.user;\n\n        if (!displayName || !photoURL) {\n          // se o usuario nao tiver um nome ou uma foto vai disparar um error\n          throw new Error('Missing information from Google Account');\n        }\n\n        setUser({\n          // se ta logado certo, então preenche as informações do usuario\n          id: uid,\n          name: displayName,\n          avatar: photoURL\n        });\n      }\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n      value: {\n        user,\n        signInWithGoogle\n      },\n      children: [\" //enviando um objeto (contexto)\", /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        exact: true,\n        component: Home\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/rooms/new\",\n        component: NewRoom\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"kGLk6m4BT90iK1d91zRYm0C2usk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/nlW/new_aulas/letmeask/src/App.tsx"],"names":["createContext","BrowserRouter","Route","Home","NewRoom","useState","auth","firebase","AuthContext","App","user","setUser","signInWithGoogle","provider","GoogleAuthProvider","signInWithPopup","then","result","displayName","photoURL","uid","Error","id","name","avatar"],"mappings":";;;AAAA,SAASA,aAAT,QAA8B,OAA9B;AACA,SAASC,aAAT,EAAwBC,KAAxB,QAAqC,kBAArC;AAEA,SAASC,IAAT,QAAqB,cAArB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,IAAT,EAAeC,QAAf,QAA+B,qBAA/B;;AAOA,OAAO,MAAMC,WAAW,gBAAGR,aAAa,CAAC,EAAD,CAAjC;;AAEP,SAASS,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,EAAhC,CADa,CACwB;;AAErC,WAASO,gBAAT,GAA2B;AACvB,UAAMC,QAAQ,GAAG,IAAIN,QAAQ,CAACD,IAAT,CAAcQ,kBAAlB,EAAjB;AAEAR,IAAAA,IAAI,CAACS,eAAL,CAAqBF,QAArB,EAA+BG,IAA/B,CAAoCC,MAAM,IAAI;AAAG;AAC/C,UAAIA,MAAM,CAACP,IAAX,EAAgB;AAAE;AAChB,cAAM;AAACQ,UAAAA,WAAD;AAAcC,UAAAA,QAAd;AAAwBC,UAAAA;AAAxB,YAA+BH,MAAM,CAACP,IAA5C;;AAEF,YAAI,CAACQ,WAAD,IAAgB,CAACC,QAArB,EAA+B;AAAE;AAC/B,gBAAM,IAAIE,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAEDV,QAAAA,OAAO,CAAC;AAAI;AACVW,UAAAA,EAAE,EAAEF,GADE;AAENG,UAAAA,IAAI,EAAEL,WAFA;AAGNM,UAAAA,MAAM,EAAEL;AAHF,SAAD,CAAP;AAKD;AAEF,KAfC;AAgBH;;AACD,sBACE,QAAC,aAAD;AAAA,2BACE,QAAC,WAAD,CAAa,QAAb;AAAsB,MAAA,KAAK,EAAE;AAAET,QAAAA,IAAF;AAAQE,QAAAA;AAAR,OAA7B;AAAA,kEACA,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,GAAZ;AAAgB,QAAA,KAAK,MAArB;AAAsB,QAAA,SAAS,EAAET;AAAjC;AAAA;AAAA;AAAA;AAAA,cADA,eAEA,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,YAAZ;AAAyB,QAAA,SAAS,EAAEC;AAApC;AAAA;AAAA;AAAA;AAAA,cAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GAhCQK,G;;KAAAA,G;AAkCT,eAAeA,GAAf","sourcesContent":["import { createContext } from 'react'\nimport { BrowserRouter, Route } from 'react-router-dom'\n\nimport { Home } from \"./pages/Home\";\nimport { NewRoom } from \"./pages/NewRoom\";\nimport { useState } from 'react';\nimport { auth, firebase } from './services/firebase';\n\ntype AuthContextType = { // criando tipagem\n  user: object;\n  signInWithGoogle: () => void;\n}\n\nexport const AuthContext = createContext({} as any);  \n\nfunction App() {\n  const [user, setUser] = useState();  // criando um estado (informação ) para mandar para contexto\n\n  function signInWithGoogle(){  \n      const provider = new firebase.auth.GoogleAuthProvider();\n\n      auth.signInWithPopup(provider).then(result => {  // ele abre  o login do google como poup da tela\n        if (result.user){ // se o usuario autenticado 100%  então\n          const {displayName, photoURL, uid} = result.user\n\n        if (!displayName || !photoURL) { // se o usuario nao tiver um nome ou uma foto vai disparar um error\n          throw new Error('Missing information from Google Account');\n        }\n\n        setUser({   // se ta logado certo, então preenche as informações do usuario\n          id: uid,\n          name: displayName,\n          avatar: photoURL\n        })\n      }\n\n    })       \n  }\n  return (\n    <BrowserRouter>\n      <AuthContext.Provider value={{ user, signInWithGoogle }}> //enviando um objeto (contexto)\n      <Route path=\"/\" exact component={Home} /> \n      <Route path=\"/rooms/new\" component={NewRoom} /> \n      </AuthContext.Provider>\n    </BrowserRouter>\n  \n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}