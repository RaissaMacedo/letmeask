{"ast":null,"code":"var _jsxFileName = \"C:\\\\nlw\\\\new_aulas\\\\letmeask\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext } from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport { Home } from \"./pages/Home\";\nimport { NewRoom } from \"./pages/NewRoom\";\nimport { useState } from 'react';\nimport { auth, firebase } from './services/firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext({});\n\nfunction App() {\n  _s();\n\n  const [user, setUser] = useState(); // criando um estado (informação ) para mandar para contexto\n\n  async function signInWithGoogle() {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    const result = await auth.signInWithPopup(provider); // ele abre  o login do google como poup da tela\n\n    if (result.user) {\n      // se o usuario autenticado 100%  então\n      const {\n        displayName,\n        photoURL,\n        uid\n      } = result.user;\n\n      if (!displayName || !photoURL) {\n        // se o usuario nao tiver um nome ou uma foto vai disparar um error\n        throw new Error('Missing information from Google Account');\n      }\n\n      setUser({\n        // se ta logado certo, então preenche as informações do usuario\n        id: uid,\n        name: displayName,\n        avatar: photoURL\n      });\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n      value: {\n        user,\n        signInWithGoogle\n      },\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        exact: true,\n        component: Home\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/rooms/new\",\n        component: NewRoom\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"kGLk6m4BT90iK1d91zRYm0C2usk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/nlw/new_aulas/letmeask/src/App.tsx"],"names":["createContext","BrowserRouter","Route","Home","NewRoom","useState","auth","firebase","AuthContext","App","user","setUser","signInWithGoogle","provider","GoogleAuthProvider","result","signInWithPopup","displayName","photoURL","uid","Error","id","name","avatar"],"mappings":";;;AAAA,SAASA,aAAT,QAA8B,OAA9B;AACA,SAASC,aAAT,EAAwBC,KAAxB,QAAqC,kBAArC;AAEA,SAASC,IAAT,QAAqB,cAArB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,IAAT,EAAeC,QAAf,QAA+B,qBAA/B;;AAaA,OAAO,MAAMC,WAAW,gBAAGR,aAAa,CAAC,EAAD,CAAjC;;AAEP,SAASS,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,EAAhC,CADa,CAC8B;;AAE5C,iBAAeO,gBAAf,GAAiC;AAC5B,UAAMC,QAAQ,GAAG,IAAIN,QAAQ,CAACD,IAAT,CAAcQ,kBAAlB,EAAjB;AAEA,UAAMC,MAAM,GAAG,MAAMT,IAAI,CAACU,eAAL,CAAqBH,QAArB,CAArB,CAH4B,CAG2B;;AAEvD,QAAIE,MAAM,CAACL,IAAX,EAAgB;AAAE;AACd,YAAM;AAACO,QAAAA,WAAD;AAAcC,QAAAA,QAAd;AAAwBC,QAAAA;AAAxB,UAA+BJ,MAAM,CAACL,IAA5C;;AAEJ,UAAI,CAACO,WAAD,IAAgB,CAACC,QAArB,EAA+B;AAAE;AAC7B,cAAM,IAAIE,KAAJ,CAAU,yCAAV,CAAN;AACH;;AAECT,MAAAA,OAAO,CAAC;AAAI;AACVU,QAAAA,EAAE,EAAEF,GADE;AAENG,QAAAA,IAAI,EAAEL,WAFA;AAGNM,QAAAA,MAAM,EAAEL;AAHF,OAAD,CAAP;AAKD;AACF;;AAEH,sBACE,QAAC,aAAD;AAAA,2BACE,QAAC,WAAD,CAAa,QAAb;AAAsB,MAAA,KAAK,EAAE;AAAER,QAAAA,IAAF;AAAQE,QAAAA;AAAR,OAA7B;AAAA,8BACA,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,GAAZ;AAAgB,QAAA,KAAK,MAArB;AAAsB,QAAA,SAAS,EAAET;AAAjC;AAAA;AAAA;AAAA;AAAA,cADA,eAEA,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,YAAZ;AAAyB,QAAA,SAAS,EAAEC;AAApC;AAAA;AAAA;AAAA;AAAA,cAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GAhCQK,G;;KAAAA,G;AAkCT,eAAeA,GAAf","sourcesContent":["import { createContext } from 'react'\nimport { BrowserRouter, Route } from 'react-router-dom'\n\nimport { Home } from \"./pages/Home\";\nimport { NewRoom } from \"./pages/NewRoom\";\nimport { useState } from 'react';\nimport { auth, firebase } from './services/firebase';\n\ntype User = {  // qual o formato do usuario vou logar no estado\nid: string;\nname: string;\navatar: string;\n}\n\ntype AuthContextType = { // criando tipagem, quais informações dentro do context \n  user: User | undefined;\n  signInWithGoogle: () => Promise<void>; // funcao sem retorno \n}\n\nexport const AuthContext = createContext({} as AuthContextType);  \n\nfunction App() {\n  const [user, setUser] = useState<User>();  // criando um estado (informação ) para mandar para contexto\n\n async function signInWithGoogle(){  \n      const provider = new firebase.auth.GoogleAuthProvider();\n\n      const result = await auth.signInWithPopup(provider);   // ele abre  o login do google como poup da tela\n\n      if (result.user){ // se o usuario autenticado 100%  então\n          const {displayName, photoURL, uid} = result.user\n\n      if (!displayName || !photoURL) { // se o usuario nao tiver um nome ou uma foto vai disparar um error\n          throw new Error('Missing information from Google Account');\n      }\n\n        setUser({   // se ta logado certo, então preenche as informações do usuario\n          id: uid,\n          name: displayName,\n          avatar: photoURL\n        })\n      }\n    }       \n  \n  return (\n    <BrowserRouter>\n      <AuthContext.Provider value={{ user, signInWithGoogle }}> \n      <Route path=\"/\" exact component={Home} /> \n      <Route path=\"/rooms/new\" component={NewRoom} /> \n      </AuthContext.Provider>\n    </BrowserRouter>\n  \n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}