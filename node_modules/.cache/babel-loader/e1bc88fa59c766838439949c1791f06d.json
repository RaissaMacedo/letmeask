{"ast":null,"code":"var _jsxFileName = \"C:\\\\nlw\\\\new_aulas\\\\letmeask\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect } from 'react'; // disparo de efeitos colaterais \n\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport { Home } from \"./pages/Home\";\nimport { NewRoom } from \"./pages/NewRoom\";\nimport { auth, firebase } from './services/firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext({});\n\nfunction App() {\n  _s();\n\n  const [user, setUser] = useState(); // criando um estado (informação ) para mandar para contexto\n\n  useEffect(() => {\n    const unsubcrive = auth.onAuthStateChanged(user => {\n      // ouvindo o evento\n      if (user) {\n        const {\n          displayName,\n          photoURL,\n          uid\n        } = user;\n\n        if (!displayName || !photoURL) {\n          throw new Error(\"Missing information from Google Account.\");\n        }\n\n        setUser({\n          id: uid,\n          name: displayName,\n          avatar: photoURL\n        });\n      }\n    });\n  }, []);\n\n  async function signInWithGoogle() {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    const result = await auth.signInWithPopup(provider); // ele abre  o login do google como poup da tela\n\n    if (result.user) {\n      // se o usuario autenticado 100%  então\n      const {\n        displayName,\n        photoURL,\n        uid\n      } = result.user;\n\n      if (!displayName || !photoURL) {\n        // se o usuario nao tiver um nome ou uma foto vai disparar um error\n        throw new Error('Missing information from Google Account');\n      }\n\n      setUser({\n        // se ta logado certo, então preenche as informações do usuario\n        id: uid,\n        name: displayName,\n        avatar: photoURL\n      });\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n      value: {\n        user,\n        signInWithGoogle\n      },\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        exact: true,\n        component: Home\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/rooms/new\",\n        component: NewRoom\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"hT6C72rcbfRUedrDq+TPaFfRI/M=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/nlw/new_aulas/letmeask/src/App.tsx"],"names":["createContext","useState","useEffect","BrowserRouter","Route","Home","NewRoom","auth","firebase","AuthContext","App","user","setUser","unsubcrive","onAuthStateChanged","displayName","photoURL","uid","Error","id","name","avatar","signInWithGoogle","provider","GoogleAuthProvider","result","signInWithPopup"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD,C,CAA2D;;AAC3D,SAASC,aAAT,EAAwBC,KAAxB,QAAqC,kBAArC;AAEA,SAASC,IAAT,QAAqB,cAArB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,IAAT,EAAeC,QAAf,QAA+B,qBAA/B;;AAaA,OAAO,MAAMC,WAAW,gBAAGT,aAAa,CAAC,EAAD,CAAjC;;AAEP,SAASU,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,EAAhC,CADa,CAC8B;;AAE3CC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,UAAU,GAAGN,IAAI,CAACO,kBAAL,CAAwBH,IAAI,IAAI;AAAE;AACnD,UAAIA,IAAJ,EAAS;AACP,cAAM;AAAEI,UAAAA,WAAF;AAAeC,UAAAA,QAAf;AAAyBC,UAAAA;AAAzB,YAAgCN,IAAtC;;AAEF,YAAI,CAACI,WAAD,IAAgB,CAACC,QAArB,EAA8B;AAC5B,gBAAM,IAAIE,KAAJ,CAAU,0CAAV,CAAN;AACD;;AAEDN,QAAAA,OAAO,CAAC;AACNO,UAAAA,EAAE,EAAEF,GADE;AAENG,UAAAA,IAAI,EAAEL,WAFA;AAGNM,UAAAA,MAAM,EAAEL;AAHF,SAAD,CAAP;AAKD;AACD,KAdmB,CAAnB;AAeD,GAhBQ,EAgBN,EAhBM,CAAT;;AAmBD,iBAAeM,gBAAf,GAAiC;AAC9B,UAAMC,QAAQ,GAAG,IAAIf,QAAQ,CAACD,IAAT,CAAciB,kBAAlB,EAAjB;AAEC,UAAMC,MAAM,GAAG,MAAMlB,IAAI,CAACmB,eAAL,CAAqBH,QAArB,CAArB,CAH6B,CAG0B;;AAEtD,QAAIE,MAAM,CAACd,IAAX,EAAgB;AAAE;AACd,YAAM;AAACI,QAAAA,WAAD;AAAcC,QAAAA,QAAd;AAAwBC,QAAAA;AAAxB,UAA+BQ,MAAM,CAACd,IAA5C;;AAEH,UAAI,CAACI,WAAD,IAAgB,CAACC,QAArB,EAA+B;AAAE;AAC9B,cAAM,IAAIE,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAEDN,MAAAA,OAAO,CAAC;AAAI;AACVO,QAAAA,EAAE,EAAEF,GADE;AAENG,QAAAA,IAAI,EAAEL,WAFA;AAGNM,QAAAA,MAAM,EAAEL;AAHF,OAAD,CAAP;AAKD;AACF;;AAEH,sBACE,QAAC,aAAD;AAAA,2BACE,QAAC,WAAD,CAAa,QAAb;AAAsB,MAAA,KAAK,EAAE;AAAEL,QAAAA,IAAF;AAAQW,QAAAA;AAAR,OAA7B;AAAA,8BACA,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,GAAZ;AAAgB,QAAA,KAAK,MAArB;AAAsB,QAAA,SAAS,EAAEjB;AAAjC;AAAA;AAAA;AAAA;AAAA,cADA,eAEA,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,YAAZ;AAAyB,QAAA,SAAS,EAAEC;AAApC;AAAA;AAAA;AAAA;AAAA,cAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GAnDQI,G;;KAAAA,G;AAqDT,eAAeA,GAAf","sourcesContent":["import { createContext, useState, useEffect } from 'react' // disparo de efeitos colaterais \nimport { BrowserRouter, Route } from 'react-router-dom'\n\nimport { Home } from \"./pages/Home\";\nimport { NewRoom } from \"./pages/NewRoom\";\nimport { auth, firebase } from './services/firebase';\n\ntype User = {  // qual o formato do usuario vou logar no estado\nid: string;\nname: string;\navatar: string;\n}\n\ntype AuthContextType = { // criando tipagem, quais informações dentro do context \n  user: User | undefined;\n  signInWithGoogle: () => Promise<void>; // funcao sem retorno \n}\n\nexport const AuthContext = createContext({} as AuthContextType);  \n\nfunction App() {\n  const [user, setUser] = useState<User>();  // criando um estado (informação ) para mandar para contexto\n\n  useEffect(() => {\n    const unsubcrive = auth.onAuthStateChanged(user => { // ouvindo o evento\n      if (user){\n        const { displayName, photoURL, uid} = user\n\n      if (!displayName || !photoURL){\n        throw new Error(\"Missing information from Google Account.\");\n      }\n\n      setUser({\n        id: uid,\n        name: displayName,\n        avatar: photoURL\n      })\n    }\n   })\n  }, [])\n\n\n async function signInWithGoogle(){  \n    const provider = new firebase.auth.GoogleAuthProvider();\n\n     const result = await auth.signInWithPopup(provider);   // ele abre  o login do google como poup da tela\n\n      if (result.user){ // se o usuario autenticado 100%  então\n          const {displayName, photoURL, uid} = result.user\n\n       if (!displayName || !photoURL) { // se o usuario nao tiver um nome ou uma foto vai disparar um error\n          throw new Error('Missing information from Google Account');\n        }\n\n        setUser({   // se ta logado certo, então preenche as informações do usuario\n          id: uid,\n          name: displayName,\n          avatar: photoURL\n        })\n      }\n    } \n  \n  return (\n    <BrowserRouter>\n      <AuthContext.Provider value={{ user, signInWithGoogle }}> \n      <Route path=\"/\" exact component={Home} /> \n      <Route path=\"/rooms/new\" component={NewRoom} /> \n      </AuthContext.Provider>\n    </BrowserRouter>\n  \n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}