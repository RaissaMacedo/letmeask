{"ast":null,"code":"var _jsxFileName = \"/media/raissa/2606497006494253/aulas-react/new_aulas/letmeask/src/pages/AdminRoom.tsx\",\n    _s = $RefreshSig$();\n\nimport { useHistory, useParams } from 'react-router-dom';\nimport logoImg from \"../assets/images/logo.svg\";\nimport deleteImg from \"../assets/images/delete.svg\";\nimport checkImg from \"../assets/images/check.svg\";\nimport answerImg from \"../assets/images/answer.svg\";\nimport { Button } from '../components/Button';\nimport { Question } from '../components/Question';\nimport { RoomCode } from '../components/RoomCode';\nimport { useRoom } from '../hooks/useRoom';\nimport { database } from '../services/firebase';\nimport '../styles/room.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function AdminRoom() {\n  _s();\n\n  const history = useHistory();\n  const params = useParams();\n  const roomId = params.id;\n  const {\n    title,\n    questions\n  } = useRoom(roomId);\n\n  async function handleEndRoom() {\n    await database.ref(`rooms/${roomId}`).update({\n      endedAt: new Date()\n    });\n    history.push('/');\n  }\n\n  async function handleDeleteQuestion(questionId) {\n    if (window.confirm('Tem certeza que vocÃª deseja excluir esta pergunta?')) {\n      await database.ref(`rooms/${roomId}/questions/${questionId}`).remove();\n    }\n  }\n\n  async function handleCkeckQuestionAsAnswered(questionId) {\n    await database.ref(`rooms/${roomId}/questions/${questionId}`).update({\n      isAnswered: true\n    });\n  }\n\n  async function handleHighlightQuestion(questionId) {\n    await database.ref(`rooms/${roomId}/questions/${questionId}`).update({\n      isHighlighted: true\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"page-room\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: logoImg,\n          alt: \"Letmeask\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(RoomCode, {\n            code: params.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            isOutlined: true,\n            onClick: handleEndRoom,\n            children: \"Encerrar sala\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"room-title\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Sala \", title]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this), questions.length > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [questions.length, \" pergunta(s)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 46\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-list\",\n        children: questions.map(question => {\n          return /*#__PURE__*/_jsxDEV(Question, {\n            content: question.content,\n            author: question.author,\n            isAnswered: question.isAnswered,\n            isHighlighted: question.isHiglighted,\n            children: [!question.isAnswered && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                onClick: () => handleCkeckQuestionAsAnswered(question.id),\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: checkImg,\n                  alt: \"Marcar pergunta como respondida\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 82,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 39\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                onClick: () => handleHighlightQuestion(question.id),\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: answerImg,\n                  alt: \"Dar destaque \\xE0 pergunta\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 88,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 39\n              }, this)]\n            }, void 0, true), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => handleDeleteQuestion(question.id),\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: deleteImg,\n                alt: \"Remover pergunta\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 33\n            }, this)]\n          }, question.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AdminRoom, \"jzegP1eYD/Dzuxb8KiHa++znXtE=\", false, function () {\n  return [useHistory, useParams, useRoom];\n});\n\n_c = AdminRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"AdminRoom\");","map":{"version":3,"sources":["/media/raissa/2606497006494253/aulas-react/new_aulas/letmeask/src/pages/AdminRoom.tsx"],"names":["useHistory","useParams","Button","Question","RoomCode","useRoom","database","AdminRoom","history","params","roomId","id","title","questions","handleEndRoom","ref","update","endedAt","Date","push","handleDeleteQuestion","questionId","window","confirm","remove","handleCkeckQuestionAsAnswered","isAnswered","handleHighlightQuestion","isHighlighted","logoImg","length","map","question","content","author","isHiglighted","checkImg","answerImg","deleteImg"],"mappings":";;;AAAA,SAASA,UAAT,EAAqBC,SAArB,QAAsC,kBAAtC;;;;;AAMA,SAASC,MAAT,QAAuB,sBAAvB;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,SAASC,QAAT,QAAyB,sBAAzB;AAEA,OAAO,qBAAP;;;AAOA,OAAO,SAASC,SAAT,GAAoB;AAAA;;AAEvB,QAAMC,OAAO,GAAGR,UAAU,EAA1B;AACA,QAAMS,MAAM,GAAGR,SAAS,EAAxB;AACA,QAAMS,MAAM,GAAGD,MAAM,CAACE,EAAtB;AACA,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAuBR,OAAO,CAACK,MAAD,CAApC;;AAEA,iBAAeI,aAAf,GAA8B;AAC5B,UAAOR,QAAQ,CAACS,GAAT,CAAc,SAAQL,MAAO,EAA7B,EAAgCM,MAAhC,CAAuC;AAC1CC,MAAAA,OAAO,EAAE,IAAIC,IAAJ;AADiC,KAAvC,CAAP;AAGEV,IAAAA,OAAO,CAACW,IAAR,CAAa,GAAb;AACH;;AACD,iBAAeC,oBAAf,CAAoCC,UAApC,EAAuD;AACnD,QAAGC,MAAM,CAACC,OAAP,CAAe,oDAAf,CAAH,EAAwE;AACxE,YAAMjB,QAAQ,CAACS,GAAT,CAAc,SAAQL,MAAO,cAAaW,UAAW,EAArD,EAAwDG,MAAxD,EAAN;AACC;AACJ;;AACD,iBAAeC,6BAAf,CAA6CJ,UAA7C,EAAgE;AAC5D,UAAMf,QAAQ,CAACS,GAAT,CAAc,SAAQL,MAAO,cAAaW,UAAW,EAArD,EAAwDL,MAAxD,CAA+D;AACjEU,MAAAA,UAAU,EAAE;AADqD,KAA/D,CAAN;AAGH;;AACD,iBAAeC,uBAAf,CAAuCN,UAAvC,EAA2D;AACvD,UAAMf,QAAQ,CAACS,GAAT,CAAc,SAAQL,MAAO,cAAaW,UAAW,EAArD,EAAwDL,MAAxD,CAA+D;AACjEY,MAAAA,aAAa,EAAE;AADkD,KAA/D,CAAN;AAGH;;AACA,sBACG;AAAK,IAAA,EAAE,EAAC,WAAR;AAAA,4BACI;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA,gCACI;AAAK,UAAA,GAAG,EAAEC,OAAV;AAAmB,UAAA,GAAG,EAAC;AAAvB;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA,kCACI,QAAC,QAAD;AAAU,YAAA,IAAI,EAAEpB,MAAM,CAACE;AAAvB;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,MAAD;AAAQ,YAAA,UAAU,MAAlB;AAAmB,YAAA,OAAO,EAAEG,aAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,eAWI;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,gCACI;AAAA,8BAAUF,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAEKC,SAAS,CAACiB,MAAV,GAAmB,CAAnB,iBAAwB;AAAA,qBAAOjB,SAAS,CAACiB,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAF7B;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAMI;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,kBACKjB,SAAS,CAACkB,GAAV,CAAcC,QAAQ,IAAI;AACtB,8BACG,QAAC,QAAD;AAEI,YAAA,OAAO,EAAEA,QAAQ,CAACC,OAFtB;AAGI,YAAA,MAAM,EAAED,QAAQ,CAACE,MAHrB;AAII,YAAA,UAAU,EAAEF,QAAQ,CAACN,UAJzB;AAKI,YAAA,aAAa,EAAEM,QAAQ,CAACG,YAL5B;AAAA,uBAOI,CAACH,QAAQ,CAACN,UAAV,iBACI;AAAA,sCACE;AACE,gBAAA,IAAI,EAAC,QADP;AAEE,gBAAA,OAAO,EAAE,MAAMD,6BAA6B,CAACO,QAAQ,CAACrB,EAAV,CAF9C;AAAA,uCAIE;AAAK,kBAAA,GAAG,EAAEyB,QAAV;AAAoB,kBAAA,GAAG,EAAC;AAAxB;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA,sBADF,eAOE;AACE,gBAAA,IAAI,EAAC,QADP;AAEE,gBAAA,OAAO,EAAE,MAAMT,uBAAuB,CAACK,QAAQ,CAACrB,EAAV,CAFxC;AAAA,uCAIE;AAAK,kBAAA,GAAG,EAAE0B,SAAV;AAAqB,kBAAA,GAAG,EAAC;AAAzB;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA,sBAPF;AAAA,4BARR,eAuBI;AACI,cAAA,IAAI,EAAC,QADT;AAEI,cAAA,OAAO,EAAE,MAAMjB,oBAAoB,CAACY,QAAQ,CAACrB,EAAV,CAFvC;AAAA,qCAII;AAAK,gBAAA,GAAG,EAAE2B,SAAV;AAAqB,gBAAA,GAAG,EAAC;AAAzB;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,oBAvBJ;AAAA,aACSN,QAAQ,CAACrB,EADlB;AAAA;AAAA;AAAA;AAAA,kBADH;AAgCJ,SAjCA;AADL;AAAA;AAAA;AAAA;AAAA,cANJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADH;AAyDJ;;GArFeJ,S;UAEIP,U,EACDC,S,EAEcI,O;;;KALjBE,S","sourcesContent":["import { useHistory, useParams } from 'react-router-dom';\r\n\r\nimport logoImg from '../assets/images/logo.svg';\r\nimport deleteImg from '../assets/images/delete.svg';\r\nimport checkImg from '../assets/images/check.svg';\r\nimport answerImg from '../assets/images/answer.svg';\r\nimport { Button } from '../components/Button';\r\nimport { Question } from '../components/Question';\r\nimport { RoomCode } from '../components/RoomCode';\r\nimport { useRoom } from '../hooks/useRoom';\r\nimport { database } from '../services/firebase';\r\n\r\nimport '../styles/room.scss';\r\n\r\n\r\ntype RoomParams = {\r\n    id: string;\r\n}\r\n\r\nexport function AdminRoom(){\r\n    \r\n    const history = useHistory()\r\n    const params = useParams<RoomParams>(); \r\n    const roomId = params.id;\r\n    const { title, questions } = useRoom(roomId)\r\n    \r\n    async function handleEndRoom(){\r\n      await  database.ref(`rooms/${roomId}`).update({\r\n          endedAt: new Date(), \r\n        })\r\n        history.push('/');\r\n    }\r\n    async function handleDeleteQuestion(questionId: string){\r\n        if(window.confirm('Tem certeza que vocÃª deseja excluir esta pergunta?')){\r\n        await database.ref(`rooms/${roomId}/questions/${questionId}`).remove();\r\n        }\r\n    }\r\n    async function handleCkeckQuestionAsAnswered(questionId: string){\r\n        await database.ref(`rooms/${roomId}/questions/${questionId}`).update({\r\n            isAnswered: true,\r\n        })\r\n    }\r\n    async function handleHighlightQuestion(questionId: string) {\r\n        await database.ref(`rooms/${roomId}/questions/${questionId}`).update({\r\n            isHighlighted: true,\r\n        })\r\n    }\r\n     return ( \r\n        <div id=\"page-room\">\r\n            <header>\r\n                <div className=\"content\">\r\n                    <img src={logoImg} alt=\"Letmeask\" />   \r\n                    <div>\r\n                        <RoomCode code={params.id} /> \r\n                        <Button isOutlined onClick={handleEndRoom}>Encerrar sala</Button>  \r\n                    </div>          \r\n                </div>\r\n            </header>\r\n\r\n            <main>\r\n                <div className=\"room-title\">\r\n                    <h1>Sala {title}</h1>\r\n                   { questions.length > 0 && <span>{questions.length} pergunta(s)</span>}\r\n                </div>\r\n\r\n                <div className=\"question-list\">\r\n                    {questions.map(question => {\r\n                         return (\r\n                            <Question\r\n                                key={question.id}\r\n                                content={question.content}\r\n                                author={question.author}\r\n                                isAnswered={question.isAnswered}\r\n                                isHighlighted={question.isHiglighted}\r\n                            >  \r\n                               {!question.isAnswered && (\r\n                                    <>\r\n                                      <button\r\n                                        type=\"button\"\r\n                                        onClick={() => handleCkeckQuestionAsAnswered(question.id)}\r\n                                      >\r\n                                        <img src={checkImg} alt=\"Marcar pergunta como respondida\" />\r\n                                      </button>\r\n                                      <button\r\n                                        type=\"button\"\r\n                                        onClick={() => handleHighlightQuestion(question.id)}\r\n                                      >\r\n                                        <img src={answerImg} alt=\"Dar destaque Ã  pergunta\" />\r\n                                      </button>\r\n                                    </>\r\n                                )}\r\n                                <button\r\n                                    type=\"button\"\r\n                                    onClick={() => handleDeleteQuestion(question.id)}\r\n                                >\r\n                                    <img src={deleteImg} alt=\"Remover pergunta\" />\r\n                                </button>\r\n                            </Question>\r\n                        );      \r\n                    })} \r\n                </div>\r\n            </main>\r\n        </div>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}