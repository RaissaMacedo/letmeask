{"ast":null,"code":"var _jsxFileName = \"C:\\\\nlw\\\\new_aulas\\\\letmeask\\\\src\\\\contexts\\\\AuthContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect } from \"react\"; // disparo de efeitos colaterais \n\nimport { auth, firebase } from \"../services/firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext({});\nexport function AuthContextProvider(props) {\n  _s();\n\n  const [user, setUser] = useState(); // criando um estado (informação ) para mandar para contexto\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(user => {\n      // ouvindo o evento\n      if (user) {\n        const {\n          displayName,\n          photoURL,\n          uid\n        } = user;\n\n        if (!displayName || !photoURL) {\n          throw new Error(\"Missing information from Google Account.\");\n        }\n\n        setUser({\n          id: uid,\n          name: displayName,\n          avatar: photoURL\n        });\n      }\n    });\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  async function signInWithGoogle() {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    const result = await auth.signInWithPopup(provider); // ele abre  o login do google como poup da tela\n\n    if (result.user) {\n      // se o usuario autenticado 100%  então\n      const {\n        displayName,\n        photoURL,\n        uid\n      } = result.user;\n\n      if (!displayName || !photoURL) {\n        // se o usuario nao tiver um nome ou uma foto vai disparar um error\n        throw new Error('Missing information from Google Account');\n      }\n\n      setUser({\n        // se ta logado certo, então preenche as informações do usuario\n        id: uid,\n        name: displayName,\n        avatar: photoURL\n      });\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      signInWithGoogle\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AuthContextProvider, \"hT6C72rcbfRUedrDq+TPaFfRI/M=\");\n\n_c = AuthContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["C:/nlw/new_aulas/letmeask/src/contexts/AuthContext.tsx"],"names":["createContext","useState","useEffect","auth","firebase","AuthContext","AuthContextProvider","props","user","setUser","unsubscribe","onAuthStateChanged","displayName","photoURL","uid","Error","id","name","avatar","signInWithGoogle","provider","GoogleAuthProvider","result","signInWithPopup","children"],"mappings":";;;AAAA,SAASA,aAAT,EAAmCC,QAAnC,EAA6CC,SAA7C,QAA+D,OAA/D,C,CAAyE;;AACzE,SAASC,IAAT,EAAeC,QAAf,QAA+B,sBAA/B;;AAoBA,OAAO,MAAMC,WAAW,gBAAGL,aAAa,CAAC,EAAD,CAAjC;AAGP,OAAO,SAASM,mBAAT,CAA6BC,KAA7B,EAA6D;AAAA;;AAEnE,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,EAAhC,CAFmE,CAExB;;AAExCC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMQ,WAAW,GAAGP,IAAI,CAACQ,kBAAL,CAAwBH,IAAI,IAAI;AAAE;AACpD,UAAIA,IAAJ,EAAS;AACP,cAAM;AAAEI,UAAAA,WAAF;AAAeC,UAAAA,QAAf;AAAyBC,UAAAA;AAAzB,YAAgCN,IAAtC;;AAEF,YAAI,CAACI,WAAD,IAAgB,CAACC,QAArB,EAA8B;AAC5B,gBAAM,IAAIE,KAAJ,CAAU,0CAAV,CAAN;AACD;;AAEDN,QAAAA,OAAO,CAAC;AACNO,UAAAA,EAAE,EAAEF,GADE;AAENG,UAAAA,IAAI,EAAEL,WAFA;AAGNM,UAAAA,MAAM,EAAEL;AAHF,SAAD,CAAP;AAKD;AACD,KAdoB,CAApB;AAeA,WAAO,MAAM;AACTH,MAAAA,WAAW;AACd,KAFD;AAID,GApBM,EAoBJ,EApBI,CAAT;;AAuBC,iBAAeS,gBAAf,GAAiC;AAC9B,UAAMC,QAAQ,GAAG,IAAIhB,QAAQ,CAACD,IAAT,CAAckB,kBAAlB,EAAjB;AAEC,UAAMC,MAAM,GAAG,MAAMnB,IAAI,CAACoB,eAAL,CAAqBH,QAArB,CAArB,CAH6B,CAG0B;;AAEtD,QAAIE,MAAM,CAACd,IAAX,EAAgB;AAAE;AACd,YAAM;AAACI,QAAAA,WAAD;AAAcC,QAAAA,QAAd;AAAwBC,QAAAA;AAAxB,UAA+BQ,MAAM,CAACd,IAA5C;;AAEH,UAAI,CAACI,WAAD,IAAgB,CAACC,QAArB,EAA+B;AAAE;AAC9B,cAAM,IAAIE,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAEDN,MAAAA,OAAO,CAAC;AAAI;AACVO,QAAAA,EAAE,EAAEF,GADE;AAENG,QAAAA,IAAI,EAAEL,WAFA;AAGNM,QAAAA,MAAM,EAAEL;AAHF,OAAD,CAAP;AAKD;AACF;;AACL,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEL,MAAAA,IAAF;AAAQW,MAAAA;AAAR,KAA7B;AAAA,cACGZ,KAAK,CAACiB;AADT;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH;;GApDelB,mB;;KAAAA,mB","sourcesContent":["import { createContext, ReactNode, useState, useEffect  } from \"react\";  // disparo de efeitos colaterais \r\nimport { auth, firebase } from \"../services/firebase\";\r\n\r\n\r\n\r\ntype User = {  // qual o formato do usuario vou logar no estado\r\n    id: string;\r\n    name: string;\r\n    avatar: string;\r\n    }\r\n    \r\ntype AuthContextType = { // criando tipagem, quais informações dentro do context \r\n    user: User | undefined;\r\n    signInWithGoogle: () => Promise<void>; // funcao sem retorno \r\n }\r\n \r\ntype AuthContextProviderProps = {\r\n    children: ReactNode;\r\n\r\n}\r\n\r\nexport const AuthContext = createContext({} as AuthContextType);  \r\n \r\n\r\nexport function AuthContextProvider(props: AuthContextProviderProps){\r\n\r\n const [user, setUser] = useState<User>();  // criando um estado (informação ) para mandar para contexto\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = auth.onAuthStateChanged(user => { // ouvindo o evento\r\n          if (user){\r\n            const { displayName, photoURL, uid} = user\r\n    \r\n          if (!displayName || !photoURL){\r\n            throw new Error(\"Missing information from Google Account.\");\r\n          }\r\n    \r\n          setUser({\r\n            id: uid,\r\n            name: displayName,\r\n            avatar: photoURL\r\n          })\r\n        }\r\n       })\r\n        return () => {\r\n            unsubscribe();\r\n        }\r\n    \r\n      }, [])\r\n    \r\n    \r\n     async function signInWithGoogle(){  \r\n        const provider = new firebase.auth.GoogleAuthProvider();\r\n    \r\n         const result = await auth.signInWithPopup(provider);   // ele abre  o login do google como poup da tela\r\n    \r\n          if (result.user){ // se o usuario autenticado 100%  então\r\n              const {displayName, photoURL, uid} = result.user\r\n    \r\n           if (!displayName || !photoURL) { // se o usuario nao tiver um nome ou uma foto vai disparar um error\r\n              throw new Error('Missing information from Google Account');\r\n            }\r\n    \r\n            setUser({   // se ta logado certo, então preenche as informações do usuario\r\n              id: uid,\r\n              name: displayName,\r\n              avatar: photoURL\r\n            })\r\n          }\r\n        } \r\n    return(\r\n        <AuthContext.Provider value={{ user, signInWithGoogle }}> \r\n          {props.children}\r\n        </AuthContext.Provider>\r\n\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}