{"ast":null,"code":"var _jsxFileName = \"C:\\\\nlw\\\\new_aulas\\\\letmeask\\\\src\\\\pages\\\\Room.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport logoImg from \"../assets/images/logo.svg\";\nimport { Button } from '../components/Button';\nimport { Question } from '../components/Question';\nimport { RoomCode } from '../components/RoomCode';\nimport { useAuth } from '../hooks/useAuth';\nimport { database } from '../services/firebase';\nimport '../styles/room.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Room() {\n  _s();\n\n  const {\n    user\n  } = useAuth(); // apenas usuario autenticado poderá fazer novas perguntas\n\n  const params = useParams(); //parametros que essa rota vai receber\n\n  const [newQuestion, setNewQuestion] = useState(''); // informacao da nova pergunta\n\n  const roomId = params.id;\n  useEffect(() => {\n    const roomRef = database.ref(`rooms/${roomId}`);\n    roomRef.on('value', room => {\n      var _databaseRoom$questio;\n\n      const databaseRoom = room.val();\n      const firebaseQuestions = (_databaseRoom$questio = databaseRoom.questions) !== null && _databaseRoom$questio !== void 0 ? _databaseRoom$questio : {};\n      const parsedQuestions = Object.entries(firebaseQuestions).map(([key, value]) => {\n        return {\n          id: key,\n          content: value.content,\n          author: value.author,\n          isHiglighted: value.isHiglighted,\n          isAnswered: value.isAnswered\n        };\n      });\n      setTitle(databaseRoom.title);\n      setQuestions(parsedQuestions);\n    });\n  }, [roomId]);\n\n  async function handleSendQuestion(event) {\n    event.preventDefault();\n\n    if (newQuestion.trim() == '') {\n      return;\n    }\n\n    if (!user) {\n      throw new Error('You  must be logged in');\n    }\n\n    const question = {\n      content: newQuestion,\n      author: {\n        name: user === null || user === void 0 ? void 0 : user.name,\n        avatar: user.avatar\n      },\n      isHighligted: false,\n      inAnwsered: false\n    };\n    await database.ref(`rooms/${roomId}/questions`).push(question);\n    setNewQuestion('');\n  }\n\n  return (\n    /*#__PURE__*/\n    //componente\n    _jsxDEV(\"div\", {\n      id: \"page-room\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: logoImg,\n            alt: \"Letmeask\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(RoomCode, {\n            code: params.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"room-title\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: [\"Sala \", title]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 21\n          }, this), questions.length > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [questions.length, \" pergunta(s)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 46\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSendQuestion,\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            placeholder: \"O que voc\\xEA quer perguntar?\",\n            onChange: event => setNewQuestion(event.target.value) // pegar o valor do input conforme é digitado\n            ,\n            value: newQuestion // caso altere o valor\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-footer\",\n            children: [user ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"user-info\",\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: user.avatar,\n                alt: user.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 32\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: user.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 32\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 28\n            }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Para enviar uma pergunta, \", /*#__PURE__*/_jsxDEV(\"button\", {\n                children: \"fa\\xE7a seu login\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 57\n              }, this), \".\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              disabled: !user,\n              children: \"Enviar pergunta\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-list\",\n          children: questions.map(question => {\n            return /*#__PURE__*/_jsxDEV(Question // element\n            , {\n              content: question.content,\n              author: question.author\n            }, question.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 29\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this)\n  );\n}\n\n_s(Room, \"/Cy9JTrx4j3AAi323Vd92LDGD9Y=\", false, function () {\n  return [useAuth, useParams];\n});\n\n_c = Room;\n\nvar _c;\n\n$RefreshReg$(_c, \"Room\");","map":{"version":3,"sources":["C:/nlw/new_aulas/letmeask/src/pages/Room.tsx"],"names":["useEffect","useState","useParams","Button","Question","RoomCode","useAuth","database","Room","user","params","newQuestion","setNewQuestion","roomId","id","roomRef","ref","on","room","databaseRoom","val","firebaseQuestions","questions","parsedQuestions","Object","entries","map","key","value","content","author","isHiglighted","isAnswered","setTitle","title","setQuestions","handleSendQuestion","event","preventDefault","trim","Error","question","name","avatar","isHighligted","inAnwsered","push","logoImg","length","target"],"mappings":"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","sourcesContent":["import { useEffect } from 'react';\r\nimport { FormEvent, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport logoImg from '../assets/images/logo.svg';\r\nimport { Button } from '../components/Button';\r\nimport { Question } from '../components/Question';\r\nimport { RoomCode } from '../components/RoomCode';\r\nimport { useAuth } from '../hooks/useAuth';\r\nimport { database } from '../services/firebase';\r\n\r\nimport '../styles/room.scss';\r\n\r\ntype FirebaseQuestions = Record<string, {\r\n    author: {\r\n        name: string,\r\n        avatar: string\r\n    }\r\n    content: string;\r\n    isAnswered: boolean;\r\n    isHiglighted: boolean;\r\n}>\r\n\r\n\r\ntype RoomParams = {\r\n    id: string;\r\n}\r\n\r\nexport function Room(){\r\n\r\n\r\n    const { user } = useAuth(); // apenas usuario autenticado poderá fazer novas perguntas\r\n    const params = useParams<RoomParams>(); //parametros que essa rota vai receber\r\n    const [newQuestion, setNewQuestion] = useState(''); // informacao da nova pergunta\r\n    \r\n    const roomId = params.id;\r\n\r\n    useEffect(() =>{ \r\n        const roomRef = database.ref(`rooms/${roomId}`);\r\n\r\n        roomRef.on('value', room => {\r\n            const databaseRoom = room.val();\r\n            const firebaseQuestions: FirebaseQuestions = databaseRoom.questions ?? {};\r\n\r\n            const parsedQuestions = Object.entries(firebaseQuestions).map(([key, value]) =>{\r\n                return {\r\n                    id: key,\r\n                    content: value.content,\r\n                    author: value.author,\r\n                    isHiglighted: value.isHiglighted,\r\n                    isAnswered: value.isAnswered,\r\n                }\r\n            })\r\n            setTitle(databaseRoom.title);\r\n            setQuestions(parsedQuestions)\r\n        }) \r\n    }, [roomId]);\r\n  \r\n    async function handleSendQuestion(event: FormEvent){\r\n        event.preventDefault();\r\n        if(newQuestion.trim() == ''){\r\n            return;\r\n        }\r\n        \r\n        if (!user){\r\n            throw new Error('You  must be logged in');\r\n\r\n        }\r\n        const question = {\r\n            content: newQuestion,\r\n            author: {\r\n                name: user?.name,\r\n                avatar: user.avatar,\r\n               \r\n            },\r\n            isHighligted: false, \r\n            inAnwsered: false\r\n        };\r\n\r\n        await database.ref(`rooms/${roomId}/questions`).push(question); \r\n\r\n        setNewQuestion(''); \r\n    }\r\n    return ( //componente\r\n        <div id=\"page-room\">\r\n            <header>\r\n                <div className=\"content\">\r\n                    <img src={logoImg} alt=\"Letmeask\" />   \r\n                    <RoomCode code={params.id} />              \r\n                </div>\r\n            </header>\r\n\r\n            <main>\r\n                <div className=\"room-title\">\r\n                    <h1>Sala {title}</h1>\r\n                   { questions.length > 0 && <span>{questions.length} pergunta(s)</span>}\r\n                </div>\r\n\r\n                <form onSubmit={handleSendQuestion}>\r\n                    <textarea \r\n                         placeholder=\"O que você quer perguntar?\"\r\n                         onChange={event => setNewQuestion(event.target.value)} // pegar o valor do input conforme é digitado\r\n                         value={newQuestion} // caso altere o valor\r\n                    />\r\n                    <div className=\"form-footer\">\r\n                       { user ? (\r\n                           <div className=\"user-info\"> \r\n                               <img src={user.avatar} alt={user.name}/>\r\n                               <span>{user.name}</span>\r\n                            </div>\r\n                        ) : (\r\n                        <span>Para enviar uma pergunta, <button>faça seu login</button>.</span>\r\n                       ) }\r\n                        <Button type=\"submit\" disabled={!user}>Enviar pergunta</Button>\r\n                    </div>\r\n                </form>\r\n                <div className=\"question-list\">\r\n                    {questions.map(question => {\r\n                        return (\r\n                            <Question // element\r\n                                key={question.id}\r\n                                content={question.content}\r\n                                author={question.author}\r\n                            />\r\n                        );      \r\n                    })} \r\n                </div>\r\n            </main>\r\n        </div>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}