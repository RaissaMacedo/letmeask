{"ast":null,"code":"var _jsxFileName = \"C:\\\\nlw\\\\new_aulas\\\\letmeask\\\\src\\\\pages\\\\AdminRoom.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport logoImg from \"../assets/images/logo.svg\";\nimport { Question } from '../components/Question';\nimport { RoomCode } from '../components/RoomCode';\nimport { useAuth } from '../hooks/useAuth';\nimport { useRoom } from '../hooks/useRoom';\nimport { database } from '../services/firebase';\nimport '../styles/room.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function AdminRoom() {\n  _s();\n\n  const {\n    user\n  } = useAuth(); // apenas usuario autenticado poderá fazer novas perguntas\n\n  const params = useParams(); //parametros que essa rota vai receber\n\n  const [newQuestion, setNewQuestion] = useState(''); // informacao da nova pergunta\n\n  const roomId = params.id;\n  const {\n    title,\n    questions\n  } = useRoom(roomId);\n\n  async function handleSendQuestion(event) {\n    event.preventDefault();\n\n    if (newQuestion.trim() == '') {\n      return;\n    }\n\n    if (!user) {\n      throw new Error('You  must be logged in');\n    }\n\n    const question = {\n      content: newQuestion,\n      author: {\n        name: user === null || user === void 0 ? void 0 : user.name,\n        avatar: user.avatar\n      },\n      isHighligted: false,\n      inAnwsered: false\n    };\n    await database.ref(`rooms/${roomId}/questions`).push(question);\n    setNewQuestion('');\n  }\n\n  return (\n    /*#__PURE__*/\n    //componente\n    _jsxDEV(\"div\", {\n      id: \"page-room\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: logoImg,\n            alt: \"Letmeask\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(RoomCode, {\n            code: params.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"room-title\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: [\"Sala \", title]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 21\n          }, this), questions.length > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [questions.length, \" pergunta(s)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 46\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-list\",\n          children: questions.map(question => {\n            return /*#__PURE__*/_jsxDEV(Question // element\n            , {\n              content: question.content,\n              author: question.author\n            }, question.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 29\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this)\n  );\n}\n\n_s(AdminRoom, \"XYMVeuwfXHPVAdm6BT+qm/rIeCU=\", false, function () {\n  return [useAuth, useParams, useRoom];\n});\n\n_c = AdminRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"AdminRoom\");","map":{"version":3,"sources":["C:/nlw/new_aulas/letmeask/src/pages/AdminRoom.tsx"],"names":["useState","useParams","Question","RoomCode","useAuth","useRoom","database","AdminRoom","user","params","newQuestion","setNewQuestion","roomId","id","title","questions","handleSendQuestion","event","preventDefault","trim","Error","question","content","author","name","avatar","isHighligted","inAnwsered","ref","push","logoImg","length","map"],"mappings":"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","sourcesContent":["import { FormEvent, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport logoImg from '../assets/images/logo.svg';\r\nimport { Button } from '../components/Button';\r\nimport { Question } from '../components/Question';\r\nimport { RoomCode } from '../components/RoomCode';\r\nimport { useAuth } from '../hooks/useAuth';\r\nimport { useRoom } from '../hooks/useRoom';\r\nimport { database } from '../services/firebase';\r\n\r\nimport '../styles/room.scss';\r\n\r\ntype RoomParams = {\r\n    id: string;\r\n}\r\n\r\nexport function AdminRoom(){\r\n    const { user } = useAuth(); // apenas usuario autenticado poderá fazer novas perguntas\r\n    const params = useParams<RoomParams>(); //parametros que essa rota vai receber\r\n    const [newQuestion, setNewQuestion] = useState(''); // informacao da nova pergunta\r\n    const roomId = params.id;\r\n    const { title, questions } = useRoom(roomId)\r\n    \r\n    async function handleSendQuestion(event: FormEvent){\r\n        event.preventDefault();\r\n        if(newQuestion.trim() == ''){\r\n            return;\r\n        }\r\n        if (!user){\r\n            throw new Error('You  must be logged in');\r\n        }\r\n        const question = {\r\n            content: newQuestion,\r\n            author: {\r\n                name: user?.name,\r\n                avatar: user.avatar,\r\n               \r\n            },\r\n            isHighligted: false, \r\n            inAnwsered: false\r\n        };\r\n\r\n        await database.ref(`rooms/${roomId}/questions`).push(question); \r\n\r\n        setNewQuestion(''); \r\n    }\r\n    return ( //componente\r\n        <div id=\"page-room\">\r\n            <header>\r\n                <div className=\"content\">\r\n                    <img src={logoImg} alt=\"Letmeask\" />   \r\n                    <RoomCode code={params.id} />              \r\n                </div>\r\n            </header>\r\n\r\n            <main>\r\n                <div className=\"room-title\">\r\n                    <h1>Sala {title}</h1>\r\n                   { questions.length > 0 && <span>{questions.length} pergunta(s)</span>}\r\n                </div>\r\n\r\n                <div className=\"question-list\">\r\n                    {questions.map(question => {\r\n                        return (\r\n                            <Question // element\r\n                                key={question.id}\r\n                                content={question.content}\r\n                                author={question.author}\r\n                            />\r\n                        );      \r\n                    })} \r\n                </div>\r\n            </main>\r\n        </div>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}